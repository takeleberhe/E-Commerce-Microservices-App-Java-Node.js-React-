name: CI/CD Pipeline for E-commerce Microservices

on:
  push:
    branches:
      - main # Trigger the pipeline when code is pushed to the 'main' branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the 'main' branch

jobs:
  build_and_push_docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    strategy:
      matrix:
        service:
          - react-app
          - nodejs-services/notificationservice
          - nodejs-services/userservice
          - spring-boot-services/paymentservice
          - spring-boot-services/orderservice
          - spring-boot-services/productservice
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Fetch the code from the GitHub repository

      - name: Log in to Docker Hub
        uses: docker/login-action@v2 # Use Docker's login action
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Docker Hub username stored in GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }} # Docker Hub password stored in GitHub Secrets

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # Enable advanced Docker features for building images

      - name: Build and push Docker image for ${{ matrix.service }}
        uses: docker/build-push-action@v5 # Build and push Docker images to Docker Hub
        with:
          context: ./${{ matrix.service }} # Path to the service's Dockerfile
          push: true # Push the image to Docker Hub
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-${{ matrix.service }}:latest # Tag for the service image

  deploy_to_ecs:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: build_and_push_docker # Run this job only after the Docker images are pushed
    strategy:
      matrix:
        service:
          - react-app
          - notificationservice
          - userservice
          - paymentservice
          - orderservice
          - productservice
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3 # Configure AWS CLI with GitHub Secrets
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Set your AWS region

      - name: Deploy ${{ matrix.service }} to ECS
        run: |
          aws ecs update-service \
            --cluster ecommerce-cluster \
            --service ${{ matrix.service }}-service \
            --force-new-deployment
